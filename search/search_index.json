{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Hawk SDK Documentation","text":"<p>To view the source code visit hawk-sdk.</p>"},{"location":"#setup-installation","title":"Setup &amp; Installation","text":"<p>To install the Hawk SDK, run the following command:</p> <pre><code>pip install hawk-sdk\n</code></pre> <p>Set your environment variables to access the data:</p> <p><pre><code>export GOOGLE_APPLICATION_CREDENTIALS=\"/path/to/your/service_account.json\"\n</code></pre> or <pre><code>export SERVICE_ACCOUNT_JSON=\"{\\\"type\\\":\\\"service_account\\\",\\\"project_id\\\":\\\"...\\\"}\"\n</code></pre></p> <p>NOTE: The database and SDK use UTC time for all timestamps.</p>"},{"location":"#docs","title":"Docs","text":"FuturesSystemDataObjectCore <p>The <code>Futures</code> class serves as an API to fetch open, high, low, close, volume, and open interest (OHLCVO) data from the Hawk Global Futures repository using specified date ranges and intervals.</p> <p>The <code>System</code> class serves as an API to fetch Hawk IDs based on a list of tickers from the Hawk Global System repository.</p> <p>The <code>DataObject</code> class is returned by the SDK classes. It contains the data for the response and allows you to access the data in a more structured way.</p> <p>The <code>Core</code> module contains core functionality for the entire system. Things such as universal enums, constants, and utility functions are defined here.</p>"},{"location":"#initialization","title":"Initialization","text":"<pre><code>def __init__(self, environment: str = \"production\", credentials_path: str = None)\n</code></pre> <p>Initializes the <code>Futures</code> datasource with an environment and optional credentials file.</p> <ul> <li>environment: (Optional) The GCP environment to use. The decides which dataset to query. Default is <code>\"production\"</code>. You may optionally set this to <code>\"development\"</code>.</li> </ul>"},{"location":"#methods","title":"Methods","text":""},{"location":"#get_ohlcvo","title":"get_ohlcvo","text":"<pre><code>def get_ohlcvo(self, start_date: str, end_date: str, interval: str, hawk_ids: List[int]) -&gt; DataObject\n</code></pre> <p>Fetches OHLCVO data (open, high, low, close, volume, and open interest) for a given date range and list of Hawk IDs.</p> <ul> <li>start_date: The start date for the data query, in the format <code>YYYY-MM-DD</code>.</li> <li>end_date: The end date for the data query, in the format <code>YYYY-MM-DD</code>.</li> <li>interval: The interval for the data query (e.g., <code>'1d'</code>).</li> <li>hawk_ids: A list of Hawk IDs to filter by.</li> <li>Returns: A <code>DataObject</code> containing the resulting OHLCVO data.</li> </ul>"},{"location":"#get_snapshot","title":"get_snapshot","text":"<pre><code>def get_snapshot(self, timestamp: str, hawk_ids: List[int]) -&gt; DataObject\n</code></pre> <p>Fetches snapshot data for a given timestamp and list of Hawk IDs. The snapshot data includes key metrics such as the most recent values for close, high, low, cumulative volume, bid, and ask prices as of the specified timestamp.</p> <ul> <li>timestamp: The cutoff timestamp for the data query, in the format <code>YYYY-MM-DD HH:MM:SS</code>.</li> <li>hawk_ids: A list of Hawk IDs to filter by.</li> <li>Returns: A <code>DataObject</code> containing the resulting snapshot data, including columns:<ul> <li><code>close_snapshot</code></li> <li><code>high_snapshot</code></li> <li><code>low_snapshot</code></li> <li><code>cvol_snapshot</code> (cumulative volume)</li> <li><code>bid_snapshot</code></li> <li><code>ask_snapshot</code></li> <li>Along with the associated <code>date</code> and <code>ticker</code> for each Hawk ID.</li> </ul> </li> </ul>"},{"location":"#initialization_1","title":"Initialization","text":"<pre><code>def __init__(self, environment: str = \"production\", credentials_path: str = None)\n</code></pre> <p>Initializes the <code>System</code> datasource with an environment and optional credentials file.</p> <ul> <li>environment: (Optional) The GCP environment to use. The decides which dataset to query. Default is <code>\"production\"</code>. You may optionally set this to <code>\"development\"</code>.</li> </ul>"},{"location":"#methods_1","title":"Methods","text":""},{"location":"#get_hawk_ids","title":"get_hawk_ids","text":"<pre><code>def get_hawk_ids(self, tickers: List[str]) -&gt; DataObject\n</code></pre> <p>Fetches Hawk IDs based on a list of ticker strings.</p> <ul> <li>tickers: A list of ticker strings to filter by.</li> <li>Returns: A <code>DataObject</code> containing the resulting Hawk IDs.</li> </ul>"},{"location":"#methods_2","title":"Methods","text":""},{"location":"#to_df","title":"to_df","text":"<pre><code>def to_df(self) -&gt; pd.DataFrame: ...\n</code></pre> <p>Exports the data into a Pandas DataFrame.</p> <ul> <li>Returns: A <code>pd.DataFrame</code> containing the data.</li> </ul>"},{"location":"#to_csv","title":"to_csv","text":"<pre><code>def to_csv(self, file_name: str) -&gt; None: ...\n</code></pre> <p>Exports the data to a CSV file.</p> <ul> <li>file_name: The name of the output CSV file.</li> <li>Returns: None</li> </ul>"},{"location":"#to_xlsx","title":"to_xlsx","text":"<pre><code>def to_xlsx(self, file_name: str) -&gt; None: ...\n</code></pre> <p>Exports the data to an Excel (.xlsx) file.</p> <ul> <li>file_name: The name of the output Excel file.</li> <li>Returns: None</li> </ul>"},{"location":"#show","title":"show","text":"<pre><code>def show(self, n: int = 5) -&gt; None: ...\n</code></pre> <p>Displays the first <code>n</code> rows of the data.</p> <ul> <li>n: The number of rows to display. Default is 5.</li> <li>Returns: None, but prints the data to the console.</li> </ul>"},{"location":"futures_usage/","title":"Futures usage","text":""},{"location":"futures_usage/#fetching-ohlcvo-data","title":"Fetching OHLCVO Data","text":"<p>Below is a simple example demonstrating how to use the Hawk SDK to fetch OHLCVO data for a given date range and list of Hawk IDs.</p> <p>Assuming you have followed the setup and installation instructions properly, you can use the following code to fetch and display the OHLCVO data:</p> <pre><code>from hawk_sdk.api import Futures\n\n# Initialize the Futures Source\nfutures = Futures()\n\n# Fetch OHLCVO Data\nresponse = futures.get_ohlcvo(\n    start_date=\"2024-04-01\",\n    end_date=\"2024-10-01\",\n    interval=\"1d\",\n    hawk_ids=[20000, 20001, 20002, 20005]\n)\n\n# Display the Data\nresponse.show()\n\n# Export the Data to a DataFrame\ndf = response.to_df()\n\n# Export the Data to CSV\nresponse.to_csv(\"ohlcvo_data.csv\")\n</code></pre>"},{"location":"futures_usage/#fetching-snapshot-data","title":"Fetching Snapshot Data","text":"<p>Below is an example demonstrating how to use the Hawk SDK to fetch snapshot data for a given timestamp and list of Hawk IDs.</p> <p>Assuming you have followed the setup and installation instructions properly, you can use the following code to fetch and display the snapshot data:</p> <pre><code>from hawk_sdk.api import Futures\n\n# Initialize the Futures Source\nfutures = Futures()\n\n# Fetch Snapshot Data\nresponse = futures.get_snapshot(\n    timestamp=\"2024-12-01 15:00:00\",\n    hawk_ids=[20000, 20001, 20002, 20005]\n)\n\n# Display the Data\nresponse.show()\n\n# Export the Data to a DataFrame\ndf = response.to_df()\n\n# Export the Data to CSV\nresponse.to_csv(\"snapshot_data.csv\")\n</code></pre>"},{"location":"system_usage/","title":"System usage","text":"<p>Here is a simple example of how to use the Hawk SDK to fetch Hawk IDs based on a list of tickers.</p> <p>Assuming you have followed the setup instructions properly, you can use the following code to fetch Hawk IDs for a given list of tickers.</p> <pre><code>from hawk_sdk.api import System\n\n# Initialize the System Source\nsystem = System()\n\n# Fetch Hawk IDs for specified tickers\nresponse = system.get_hawk_ids(\n    tickers=[\"CL00-USA\", \"JBT00-OSE\", \"SFC00-USA\", \"FGBS00-EUR\"]\n)\n\n# Display the Data\nresponse.show()\n\n# Export the Data to a DataFrame\ndf = response.to_df()\n\n# Export the Data to CSV\nresponse.to_csv(\"hawk_ids_data.csv\")\n</code></pre>"},{"location":"system_usage/#explanation","title":"Explanation:","text":"<ol> <li>Initialization: The <code>System</code> class is instantiated without specifying any environment, so it defaults to <code>\"production\"</code>. You can change this if needed.</li> <li>Fetching Hawk IDs: The <code>get_hawk_ids</code> method is called with a list of ticker symbols like <code>\"AAPL\"</code>, <code>\"GOOGL\"</code>, <code>\"MSFT\"</code>, and <code>\"TSLA\"</code>.</li> <li>Displaying the Data: The <code>response.show()</code> method displays the first few rows of the fetched data in the console.</li> <li>Export to DataFrame: The data is converted to a pandas DataFrame for further analysis.</li> <li>Export to CSV: The data is saved to a CSV file named <code>\"hawk_ids_data.csv\"</code>.</li> </ol> <p>This usage example provides a quick and clear guide on how to utilize the <code>System</code> class to fetch Hawk IDs for a given set of tickers. Let me know if you need further adjustments!</p>"}]}